import { Markup, Telegraf } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { Command } from "./command.class";

export class StartCommand extends Command {
  constructor(public bot: Telegraf<IBotContext>) {
    super(bot);
  }

  handle(): void {
    this.bot.start((ctx) => {
      ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!");
      ctx.reply("–í–∞—à–µ –∏–º—è?");
      ctx.session.step = "name";
    });

    this.bot.on("text", (ctx) => {
      switch (ctx.session.step) {
        case "name":
          ctx.session.name = ctx.message.text;
          ctx.reply("–û—Ç–ª–∏—á–Ω–æ!");
          ctx.reply("–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è?");
          ctx.session.step = "surname";
          break;
        case "surname":
          ctx.session.surname = ctx.message.text;
          ctx.reply("–û—Ç–ª–∏—á–Ω–æ!");
          ctx.reply("–í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è?");
          ctx.session.step = "organization";
          break;
        case "organization":
          ctx.session.organization = ctx.message.text;
          ctx.reply("–û—Ç–ª–∏—á–Ω–æ!");
          const keyboard = Markup.keyboard([
            Markup.button.contactRequest("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω"),
          ]);
          ctx.reply("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?", keyboard);
          ctx.session.step = "phone";
          break;
        case "phone":
          if (this.phoneValidator(ctx.message.text)) {
            ctx.session.phone_number = ctx.message.text;
            ctx.reply("–û—Ç–ª–∏—á–Ω–æ!", Markup.removeKeyboard());
          }
          break;
        default:
          ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!");
          ctx.session.step = "age";
          break;
      }
    });

    this.bot.on("contact", async (ctx) => {
      const phone = ctx.message.contact.phone_number;
      const message = `–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
      ctx.reply(message);
      ctx.reply("–°–ø–∞—Å–∏–±–æ!", Markup.removeKeyboard());
    });
  }

  phoneValidator(phoneNumber: string): boolean {
    const regex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
    return regex.test(phoneNumber);
  }
}
